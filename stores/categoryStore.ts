import { defineStore } from 'pinia'
import { Category } from '~/types/categories'
import { Query } from '~/types/query'

/**
 * @interface QueryParams
 * @member {Number} offset - –°–¥–≤–∏–≥ –∑–∞–ø–∏—Å–µ–π
 * @member {Number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
 * @member {Object} where - –£—Å–ª–æ–≤–∏—è –æ—Ç–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏
 * @member {String} order - –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 * @member {boolean} desc - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
 */
type SelectParams = {
  offset?: number
  limit?: number 
  where?: any
  order?: string
}

export const useCategoryStore = defineStore('category', () => {
  const list = ref<any>([]) // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const count = ref<number>(0) // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
  const item = ref<Category | null>(null) // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  const loading = ref<boolean>(true) // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
  const error = ref<any>(true) // –û—à–∏–±–∫–∞
  const updateData = ref<any>({}) // –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const limit = ref<any>(50)
  const offset = ref<any>(0)
  const selectParams = ref<SelectParams>({ offset, limit, order: JSON.stringify([['name', 'ASC']]) }) // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const where = ref<any>({}) // –£—Å–ª–æ–≤–∏—è –æ—Ç–±–æ—Ä–∞
  const filterCondition = ref<any>()
  
  /*
   * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–±–æ—Ä–∞
   * @function setFilter
   * @param {String} key - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —É—Å–ª–æ–≤–∏–π –æ—Ç–±–æ—Ä–∞
   * @param {String} value - –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–±–æ—Ä–∞
   */
  async function setFilter(key: string, value: any, filterCondition: string) {
    console.log('üöÄ -> setFilter -> value:', value)
    console.log('üöÄ -> setFilter -> key:', key)
    if (!value) delete where.value[key]
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–≤–æ–π—Å—Ç–≤–æ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ–µ
    else where.value[key] = `${value}`
    await getList()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @function getList
   */
  async function getList(limit?: number, offset?: number) {
    let url = `/api/categories/all?limit=${limit || selectParams.value.limit}&offset=${offset || selectParams.value.offset}&order=${selectParams.value.order}`
    if (!checkEmptyObject(where.value)) url += `&where=${JSON.stringify(where.value)}`
    try {
      loading.value = true
      const paramsQuery: Query = {
        url: url, // TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        method: 'get',
      }
      let response: any = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      await getCount()
      list.value = response.data.value // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    } catch (err: any) {
      error.value = err.value ? true : false // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
      err.value ? showToast({ message: err.value.data.message, type: 'error' }) : (loading.value = false)
    }
  }

  /*
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
   * @function getCount
   * @params {String} where - –£—Å–ª–æ–≤–∏—è –æ—Ç–±–æ—Ä–∞
   */
  async function getCount() {
    let url = `/api/categories/count`
    if (!checkEmptyObject(where.value)) url += `?where=${JSON.stringify(where.value)}`
    try {
      const paramsQuery: Query = {
        url, // TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        method: 'get',
      }
      let response: any = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      count.value = response.data.value // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    } catch (err: any) {
      error.value = err.value ? true : false // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
      err.value ? showToast({ message: err.value.data.message, type: 'error' }) : (loading.value = false)
    }
  }

  /*
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–∞–π—Ç–∞ Leads.su
   * @function getCategoryLeads
   */
  async function getCategoryLeads() {
    await useLazyFetch('/api/categories/all') // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  }

  /**
   * –û–±–≤–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
   * @function update
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async function update(data: any) {
    const paramsQuery: Query = { url: '/api/categories/edit', method: 'post', body: data.value }
    resultUpdateCategory.value = await query(paramsQuery) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
  }

  return { list, item, loading, updateData, error, getList, getCategoryLeads, setFilter, getCount, count, limit, offset, filterCondition }
})
