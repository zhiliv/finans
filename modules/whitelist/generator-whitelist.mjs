/* eslint-disable prefer-const */
import * as fs from 'fs'
import { globby } from 'globby'
import { parse } from 'node-html-parser'
// import {requiredClass} from './required-class.json' // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è
const listPath = [
  './pages/*.vue',
  './pages/**/*.vue',
  './pages/**/**/*.vue',
  './pages/modals/**/*.vue',
  './pages/modals/**/**/*.vue',
  './pages/modals/*.vue',
  './pages/guides/*.vue',
  './pages/sub/*.vue',
  './layouts/*.vue',
] // —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

const noFindAttrs = [] // –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

const dataRequiredClass = fs.readFileSync('./modules/whitelist/required-class.json').toString() // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
const requiredClass = JSON.parse(dataRequiredClass) // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ json

const dataShemasComponents = fs.readFileSync('./modules/whitelist/schemas-components.json').toString() // —á—Ç–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫–ª–∞—Å—Å–æ–≤
const shemasComponents = JSON.parse(dataShemasComponents) // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ json

/*
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ —Ñ–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 * @async
 * @function getFileAdress
 * @return {Array} –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —Ñ–∞–π–ª–æ–≤
 */
const getFileAdress = async () => {
  const list = [] // —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  for await (const namePath of listPath) {
    // –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ö–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    const paths = await globby(namePath) // –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ vue –≤ –ø–∞–ø–∫–µ
    list.push(...paths) // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤
  }
  const result = list.length ? [...new Set(list)] : [] // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–∏—Å–∫–∞
  return result
}

/*
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @async
 * @function getDataPage
 * @param {String} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @return {String} –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–≥–∞ template
 */
const getDataPage = async filePath => {
  let data = await fs.readFileSync(filePath).toString() // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
  if (data) data = data.replace(/\r\n/g, '') // —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  return data.match(/(?<=\<template\>)(\s*.*\s*)(?=\<\/template\>)/) // –ø–æ–ª—É—á–µ–Ω–∏–µ html —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
}

export const getWhiteList = async () => {
  let schema = [] // —Å—Ö–µ–º–∞ —Å —Ç–µ–≥–∞–º–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
  /*
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–µ–≥–µ
   * @function getChildren
   * @param {Array} list - –°–ø–∏—Å–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  const getChildren = async list => {
    if (list && list.length) {
      list.forEach((item, index) => {
        if (item.rawTagName) {
          const obj = { tag: item.rawTagName, attrs: item.attrs } // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç–µ–≥–∞
          schema.push(obj) // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ —Å –∞—Ç—Ç—Ä–∏–±—É—Ç–∞–º–∏ –≤ —Å—Ö–µ–º—É
          getChildren(item.childNodes) // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        }
      })
    }
  }
  const whitelist = [...requiredClass] // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫–ª–∞—Å—Å–æ–≤
  const listFiles = await getFileAdress() // —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
  for await (const filePath of listFiles) {
    const dataFile = await getDataPage(filePath) // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    const parseFile = parse(dataFile) // –ø–∞—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
    if (parseFile && parseFile.childNodes && parseFile.childNodes.length) {
      // –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const childNodes = parseFile.childNodes.slice(parseFile.childNodes.length / 2) // —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å–∏ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è
      getChildren(childNodes) // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏ –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤
    }
    schema = schema.filter(el => Object.keys(el.attrs).length) // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ –∞—Ç—Ç—Ä–∏–±—É—Ç–∞–º–∏
    // fs.writeFileSync('./modules/whitelist/schema-test.json', JSON.stringify(schema))
    schema.forEach(el => {
      const findSchema = shemasComponents.find(fnd => fnd.tag === el.tag) // –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
      if (el && el.attrs) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ attrs
        for (const nameAttr in el.attrs) { // –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
          if (nameAttr !== 'class') {  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã
            if(findSchema && findSchema.attrs){
              const attr = findSchema.attrs.find(attrEl => attrEl.name === nameAttr) // –ø–æ–∏—Å–∫ –∞—Ç—Ç—Ä–∏–±—É—Ç–∞ –≤ —Ç–µ–≥–µ —Å—Ö–µ–º—ã –∫–ª–∞—Å—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
              if(attr && attr.values) {
                const findValue = attr.values.find(elValue => elValue.value === el.attrs[nameAttr]) // –ø–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ç—Ä–∏–±—É—Ç–∞
                if(findValue) {

                  const countClass = whitelist.findIndex(elRequire => elRequire === findValue.class)
                  console.log('üöÄ -> forawait -> countClass', countClass)
                  if(countClass === -1){
                    console.log(findValue.class)
                    whitelist.push(findValue.class)
                  }
                }
                else noFindAttrs.push({tag: el.tag, nameAttr, value: el.attrs[nameAttr] })
              }
            }
          }
        }
      }
    })
  }
  fs.writeFileSync('./modules/whitelist/not-find-attrs.json', JSON.stringify(noFindAttrs))
  fs.writeFileSync('./modules/whitelist/result-whitelist.json', JSON.stringify(whitelist))
}

getWhiteList()
