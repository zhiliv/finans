import { sequelize } from '~/server/db.js'

export default defineEventHandler(async event => {
  const t = await sequelize.transaction() // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const body = await readBody(event) // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if(body && body.image){
    const image = await sequelize.models.img_organization.findOne({where: {id_organization: body.id, path: body.image}})
    body.img_organization_id = image.id
    console.log('üöÄ -> body.img_organization_id:', body.img_organization_id)
  }
  const result = {}
  try {
    const fields = ['name', 'short_description', 'description', 'site', 'img_organization_id']
    const params = { transaction: t, where: { id: body.id }, fields, returning: true } // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const edit = await sequelize.models.organizations.update(body, params) // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    await t.commit() // –∫–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    result.status = 200
    result.typeMessage = 'success'
    result.message = '–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    result.data = edit[1][0]
    return result
  } catch (error) {
    await t.rollback() // –æ—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  }
})
